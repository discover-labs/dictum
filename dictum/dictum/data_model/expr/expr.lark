// Expression language used for definining measures and dimensions

// Literals. Only numbers are supported for now. String operations are expected to be
// performed when preparing the data.
%import common.SIGNED_FLOAT  -> FLOAT
%import common.SIGNED_INT    -> INTEGER
%import common._STRING_ESC_INNER
STRING: "'" _STRING_ESC_INNER "'"
TRUE: "TRUE"i
FALSE: "FALSE"i
?literal: TRUE | FALSE | INTEGER | FLOAT | STRING

// Identifier: field (column, measure or dimension on another table), table, function name
IDENTIFIER: /[a-z_]\w*/i

// Column, measure or dimension reference. For the same table, just a bare IDENTIFIER,
// for related tables: related.field
// Can be nested, e.g. related.other.field
// e.g. sum(amount) on orders table is the same as sum(orders.amount)
// or avg(users.age) on orders with user_id fk -> users.id
column: IDENTIFIER ("." IDENTIFIER)*
measure: "$" IDENTIFIER
dimension: ":" IDENTIFIER
ARG: "@"  // argument for transforms and filters
?ref: column | measure | dimension | ARG

// Function call
call: IDENTIFIER "(" [ op ("," op)* ] ")"

?paren: "(" op ")"  // just parentheses

// precedence
?atom: literal | ref | call | paren

// Operator precedence follows SQL
// highest precedence is exponentiation
?exp_: atom | exp
exp: exp_ "**" atom

// bitwise not and unary plus don't make sense here, so not supported
?unary_: exp_ | neg
neg: "-" exp_

// stuff with multiplication
?mul_: unary_ | fdiv | div | mul | mod
fdiv: mul_ "//" unary_  // floor division
div: mul_ "/" unary_
mul: mul_ "*" unary_
mod: mul_ "%" unary_  // modulo or remainder

// addition and subtraction
?add_: mul_ | add | sub
add: add_ "+" mul_
sub: add_ "-" mul_

// comparison
?comp: add_ | gt | ge | lt | le | eq | ne | isnull | isnotnull
gt: comp ">" add_
ge: comp ">=" add_
lt: comp "<" add_
le: comp "<=" add_
eq: comp ("==" | "=") add_
ne: comp ("!=" | "<>") add_
// is null / is not null
_IS: "IS"i
_NOT: "NOT"i
_NULL: "NULL"i
isnull: add_ _IS _NULL
isnotnull: add_ _IS _NOT _NULL

// in operator
?in: comp | in_ | not_in
_in_list: "(" comp ("," comp)* ")"
in_: comp _IN _in_list
not_in: comp _NOT_IN _in_list
_IN: "IN"i
_NOT_IN: /NOT\s+IN/i

// booleans
?not: in | not_
not_: "NOT"i in

?and: not | and_
and_: and _AND not
_AND: "AND"i

?or: and | or_
or_: or _OR and
_OR: "OR"i

_CASE: "CASE"i
_WHEN: "WHEN"i
_THEN: "THEN"i
_ELSE: "ELSE"i
_END: "END"i
?case_: or | case
case: _CASE (_WHEN or _THEN or)+ [ _ELSE or ] _END

?op: case_
expr: op

%ignore /\s/
