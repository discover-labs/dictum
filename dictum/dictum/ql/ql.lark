// Dictum Query Language

%import common.SIGNED_FLOAT  -> FLOAT
%import common.SIGNED_INT    -> INTEGER
%import common._STRING_ESC_INNER
STRING: "'" _STRING_ESC_INNER "'"
TRUE: "TRUE"i
FALSE: "FALSE"i
?literal: TRUE | FALSE | INTEGER | FLOAT | STRING

QUOTED_IDENTIFIER: "\"" _STRING_ESC_INNER "\""
IDENTIFIER: /[a-z_]\w*/i
identifier: IDENTIFIER | QUOTED_IDENTIFIER
call: identifier ["(" [ literal ("," literal)* ] ")"]

// keywords
_SELECT: "SELECT"i
_WHERE: "WHERE"i
_GROUPBY: /(GROUP\s+)?BY/i
_AS: "AS"i
_IS: "IS"i
_NOT: "NOT"i
_NULL: "NULL"i
_IN: "IN"i

metric: identifier
dimension: identifier
_tran: dimension "." call

grouping: dimension ( "." call )* [ op ] [ alias ]
alias: _AS identifier

?filter: dimension ( "." call )* [ op ]

op: eq | ne | gt | ge | lt | le | isnull | isnotnull | isin
eq: ("=" | "==") literal
ne: ("!=" | "<>") literal
gt: ">" literal
ge: ">=" literal
lt: "<" literal
le: "<=" literal
isnull: _IS _NULL
isnotnull: _IS _NOT _NULL
isin: _IN _tuple
_tuple: "(" literal ("," literal)* ")"

select: _SELECT metric ( "," metric )*
where: _WHERE filter ( "," filter )*
groupby: _GROUPBY grouping ( "," grouping )*

query: select [ where ] [ groupby ]

%ignore /\s/
