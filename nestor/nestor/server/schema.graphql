schema {
    query: Query
}

type Query {
    query(input: StoreQuery!): StoreQueryResult!
    qlQuery(input: String!): StoreQueryResult!
    store: Store!
}

type CalculationFormat {
    spec: String!
    currencyPrefix: String!
    currencySuffix: String!
}

interface Calculation {
    id: String!
    name: String!
    description: String
    expr: String!
    format: CalculationFormat
}

type Metric implements Calculation {
    id: String!
    name: String!
    description: String
    expr: String!
    format: CalculationFormat
    dimensions: [Dimension!]!
}

enum DimensionType {
    time
    continuous
    ordinal
    nominal
}

scalar Range
scalar Values

type DimensionInfo {
    range: Range
    values: Values
}

type Dimension implements Calculation {
    id: String!
    name: String!
    description: String
    expr: String!
    format: CalculationFormat
    type: DimensionType!
    info: DimensionInfo
}

type Store {
    metrics: [Metric!]!
    dimensions: [Dimension!]!
}


input StoreQuery {
    metrics: [String!]!
    dimensions: [String!]!
    filters: [String!]!
}

scalar Record

type StoreQueryResult {
    metadata: StoreQueryResultMetadata!
    data: [Record!]!
}

scalar Columns
scalar NumberLocaleDefinition
scalar TimeLocaleDefinition

type LocaleDefinition {
    number: NumberLocaleDefinition
    time: TimeLocaleDefinition
}

union ResultColumn = Metric | Dimension

type StoreQueryResultMetadata {
    rawQuery: String!
    columns: [ResultColumn!]!
    locale: LocaleDefinition
    store: Store!
}
