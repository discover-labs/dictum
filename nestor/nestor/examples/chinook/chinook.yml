name: Chinook Example
description: |
  An example project based on Chinook sqlite database, use for testing, introductory
  tutorial and as a basic example of what can be done here.

.usd: &USD
  spec: $.2f
  currency_prefix: $

metrics:
  revenue_per_track:
    name: Revenue per Track in the Library
    expr: $track_count / $revenue

tables:
  invoice_items:
    source: invoice_items
    related:
      invoices:
        table: invoices
        foreign_key: InvoiceId
      tracks:
        table: tracks
        foreign_key: TrackId
    measures:
      revenue:
        name: Revenue
        expr: sum(UnitPrice * Quantity)
        format:
          <<: *USD
        key: true
        groups:
          - Sales
      arppu:
        name: ARPPU
        expr: $revenue / $unique_paying_customers
        format:
          <<: *USD
        groups:
          - Sales
          - Customers
      avg_sold_unit_price:
        name: Averate Sold Unit Price
        description: Average price of a track that we sold.
        expr: $revenue / $items_sold
        format:
          <<: *USD
        groups:
          - Sales
          - Media Library

      unique_paying_customers:
        name: Unique Paying Customers
        expr: countd(invoices.CustomerId)
        description: |
          Number of unique users who made an order.
        groups:
          - Sales
          - Customers
      items_sold:
        name: Number of Items Sold
        expr: sum(Quantity)
        format: .0f
        key: true
        groups:
          - Sales

  invoices:
    source: invoices
    primary_key: InvoiceId
    related:
      customers:
        table: customers
        foreign_key: CustomerId
    dimensions:
      invoice_date:
        name: Sale Date
        expr: InvoiceDate
        type: time
        format: "%d.%m.%Y"
      invoice_month:
        name: Sale Date (Month)
        expr: datetrunc('month', InvoiceDate)
        type: time
        format: "%b %Y"
      invoice_year:
        name: Sale Date (Year)
        expr: datetrunc('year', InvoiceDate)
        type: time
        format: "%Y"
      order_amount:
        name: Order Amount
        expr: Total
        type: continuous
        format:
          <<: *USD
      order_amount_10_dollar_bins:
        name: Total Order Amount ($10 bins)
        expr: Total // 10 * 10
        type: ordinal
        format:
          <<: *USD

  tracks:
    source: tracks
    primary_key: TrackId
    related:
      media_types:
        table: media_types
        foreign_key: MediaTypeId
      albums:
        table: albums
        foreign_key: AlbumId
      genres:
        table: genres
        foreign_key: GenreId
    measures:
      track_count:
        name: Number of Tracks
        description: |
          Total Number of Tracks in the Library. Use this measure to explore what can
          possible be sold here. Can be split up by various musical parameters: genre,
          artist, album. Has no connection to sales.
        expr: count()
      track_length:
        name: Sum of Track Length (Seconds)
        expr: sum(Milliseconds) / 1000
        format: .0f
      avg_track_length:
        name: Average Track Length (Seconds)
        expr: avg(Milliseconds) / 1000
        format: .0f
      avg_track_price:
        name: Average Track Price
        description: |
          Average price of a track in our library. For average sold item size, see
          Average Sold Unit Price.
        expr: avg(UnitPrice)
        format:
          <<: *USD
    dimensions:
      track_length_10s_bins:
        name: Track Length (10-second bins)
        expr: Milliseconds / 1000 // 10 * 10
        type: ordinal
        format: .0f

  customers:
    source: customers
    primary_key: CustomerId
    related:
      employees:
        table: employees
        foreign_key: SupportRepId
    dimensions:
      customer_country:
        name: Customer Country
        type: nominal
        expr: Country
      customer_city:
        name: Customer City
        type: nominal
        expr: City

  employees:
    source: employees
    primary_key: EmployeeId
    related:
      manager:
        table: employees
        foreign_key: ReportsTo
    dimensions:
      manager_title:
        name: Support Rep's Manager's Title
        type: nominal
        expr: manager.Title
      manager_name:
        name: Support Rep's Manager's Name
        type: nominal
        expr: manager.LastName
      employee_name:
        name: Support Rep's Name
        type: nominal
        expr: LastName
      employee_title:
        name: Support Rep's Title
        type: nominal
        expr: Title

  genres:
    source: genres
    primary_key: GenreId
    dimensions:
      genre:
        name: Genre
        expr: Name
        type: nominal

  artists:
    source: artists
    primary_key: ArtistId
    dimensions:
      artist:
        name: Artist
        expr: Name
        type: nominal

  albums:
    source: albums
    primary_key: AlbumId
    related:
      artists:
        table: artists
        foreign_key: ArtistId
    dimensions:
      album:
        name: Album Title
        expr: Title
        type: nominal

  media_types:
    source: media_types
    primary_key: MediaTypeId
    dimensions:
      media_type:
        name: Type of Media
        expr: Name
        type: nominal
